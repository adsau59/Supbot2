{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Supbot2 v0.2.3 (12th Oct 2020) Unoffical WhatsApp Automation Library for Python Overview Supbot2 is an unofficial WhatsApp automation library written in Python which can be used to create bots. Supbot2 uses Appium to automate WhatsApp application to read the GUI and call respective events, and perform various actions on the GUI. Supbot API (1.0) was extremely tedious to setup and even more difficult to use. Not only that it required to have a phone and Supbot server connected to the Internet, which made it very unstable and unreliable. Supbot2 tries to fix these issues. Easy to Use Supbot is exeremly easy and intuitive to use library. It's API is made of just two types of services: Action and Events , which are basically simple function calls. Aims for Stability Supbot aims for developers to just concentrate on building the business logic, and not to worry about how the library works. We want the API work flawlessly. Installation You can either watch the installation guide, or follow the steps below Requirements Android phone/emulator A phone number to setup WhatsApp PC Configuring Whatsapp Install Whatsapp on your phone/AVD Set it up with your phone number IMPORTANT: Turn on notification from android settings IMPORTANT: Create an empty group with !temp name and pin it to the top (You can do this by adding 1 contact to the group then kicking them out) Creating Environment You will need to setup Appium and Whatsapp before you start with Supbot Download and install JDK , Android Studio , and NPM Create JAVA_HOME environment variable by default it is C:\\PROGRA~1\\Java\\jdk1.8.0_162 in windows (don't forget to change the jdk version depending on what version you have installed) Create ANDROID_HOME environment variable by default it is %USERPROFILE%\\AppData\\Local\\Android\\Sdk in windows Install Appium using npm install -g appium@1.15.1 Connect your phone via usb, and start debugging -OR- Create and run android emulator using AVD manager Installing Supbot You will need Python >=3.7 in order to install supbot. Supbot is developed using Python 3.7.4 , so its recomended to use that, so that you don't encouter unexpected issues. Install the supbot package using pip install supbot You can test supbot by running supbot in terminal / powershell, and use the given commands to run some test functions Note: Please DON'T INTERACT WITH WHATSPAPP after the bot starts, this WILL DE-SYSC THE UI causing bot the restart the whatsapp or even resulting bot to crash, if the UI de-syncs even when you haven't touch whatsapp, please report the issue along with an exact steps to reproduce on github issues Getting Started Following code resends the message received from a contact (in just 5 LOC!). Visit Overview to understand the code. from supbot import Supbot def repeat_message(contact_name, message): supbot.send_message(contact_name, message) with Supbot(message_received=repeat_message) as supbot: supbot.wait_for_finish() Roadmap Check out the Trello board, to see what I'm working on and whats next. License Distributed under the MIT License. See LICENSE for more information. Contact If you have any problems or you want to contact me for feature ideas or want to collaborate in development you can contact me on DefineX Community discord server .","title":"Home"},{"location":"#supbot2","text":"v0.2.3 (12th Oct 2020) Unoffical WhatsApp Automation Library for Python","title":"Supbot2"},{"location":"#overview","text":"Supbot2 is an unofficial WhatsApp automation library written in Python which can be used to create bots. Supbot2 uses Appium to automate WhatsApp application to read the GUI and call respective events, and perform various actions on the GUI. Supbot API (1.0) was extremely tedious to setup and even more difficult to use. Not only that it required to have a phone and Supbot server connected to the Internet, which made it very unstable and unreliable. Supbot2 tries to fix these issues.","title":"Overview"},{"location":"#easy-to-use","text":"Supbot is exeremly easy and intuitive to use library. It's API is made of just two types of services: Action and Events , which are basically simple function calls.","title":"Easy to Use"},{"location":"#aims-for-stability","text":"Supbot aims for developers to just concentrate on building the business logic, and not to worry about how the library works. We want the API work flawlessly.","title":"Aims for Stability"},{"location":"#installation","text":"You can either watch the installation guide, or follow the steps below","title":"Installation"},{"location":"#requirements","text":"Android phone/emulator A phone number to setup WhatsApp PC","title":"Requirements"},{"location":"#configuring-whatsapp","text":"Install Whatsapp on your phone/AVD Set it up with your phone number IMPORTANT: Turn on notification from android settings IMPORTANT: Create an empty group with !temp name and pin it to the top (You can do this by adding 1 contact to the group then kicking them out)","title":"Configuring Whatsapp"},{"location":"#creating-environment","text":"You will need to setup Appium and Whatsapp before you start with Supbot Download and install JDK , Android Studio , and NPM Create JAVA_HOME environment variable by default it is C:\\PROGRA~1\\Java\\jdk1.8.0_162 in windows (don't forget to change the jdk version depending on what version you have installed) Create ANDROID_HOME environment variable by default it is %USERPROFILE%\\AppData\\Local\\Android\\Sdk in windows Install Appium using npm install -g appium@1.15.1 Connect your phone via usb, and start debugging -OR- Create and run android emulator using AVD manager","title":"Creating Environment"},{"location":"#installing-supbot","text":"You will need Python >=3.7 in order to install supbot. Supbot is developed using Python 3.7.4 , so its recomended to use that, so that you don't encouter unexpected issues. Install the supbot package using pip install supbot You can test supbot by running supbot in terminal / powershell, and use the given commands to run some test functions Note: Please DON'T INTERACT WITH WHATSPAPP after the bot starts, this WILL DE-SYSC THE UI causing bot the restart the whatsapp or even resulting bot to crash, if the UI de-syncs even when you haven't touch whatsapp, please report the issue along with an exact steps to reproduce on github issues","title":"Installing Supbot"},{"location":"#getting-started","text":"Following code resends the message received from a contact (in just 5 LOC!). Visit Overview to understand the code. from supbot import Supbot def repeat_message(contact_name, message): supbot.send_message(contact_name, message) with Supbot(message_received=repeat_message) as supbot: supbot.wait_for_finish()","title":"Getting Started"},{"location":"#roadmap","text":"Check out the Trello board, to see what I'm working on and whats next.","title":"Roadmap"},{"location":"#license","text":"Distributed under the MIT License. See LICENSE for more information.","title":"License"},{"location":"#contact","text":"If you have any problems or you want to contact me for feature ideas or want to collaborate in development you can contact me on DefineX Community discord server .","title":"Contact"},{"location":"how-to-use/action/","text":"Action Perform operations in whatsapp send_message Send message to a target contact Declaration def send_message(self, contact_name: str, message: str, callback: Optional[ActionCallback] = None) -> Action: Description Sends a message to the target contact on whatsapp. contact_name represents the name of the target contact if it is saved by a name. If not then phone number should be used, in the exact format shown in whatsapp. Currently supbot doesn't differentiate between groups and personal chat, so you can also use this method to send messages in group too.","title":"Action"},{"location":"how-to-use/action/#action","text":"Perform operations in whatsapp","title":"Action"},{"location":"how-to-use/action/#send_message","text":"Send message to a target contact","title":"send_message"},{"location":"how-to-use/action/#declaration","text":"def send_message(self, contact_name: str, message: str, callback: Optional[ActionCallback] = None) -> Action:","title":"Declaration"},{"location":"how-to-use/action/#description","text":"Sends a message to the target contact on whatsapp. contact_name represents the name of the target contact if it is saved by a name. If not then phone number should be used, in the exact format shown in whatsapp. Currently supbot doesn't differentiate between groups and personal chat, so you can also use this method to send messages in group too.","title":"Description"},{"location":"how-to-use/config/","text":"Configuration List of configuration accepted by Supbot Supbot2 can be configured using Parameters which is passed into the constructor while creating supbot object. Example with Supbot(device=\"abcd\") as supbot: over here device parameter is set to \"abcd\". Configuration can also be used when running supbot though CLI using arguments. Table given below represents the list of paramters and what it does. Parameter CLI Argument Description Parameter Example CLI Example device, device_name --device, --device-name Specify the android device to use instead of searching automatically using adb Supbot(device=\"emulator1234\") supbot --device emulator1234 no_server --no-server Don't run appium server inside supbot, used when hosting appium server separately Supbot(no_server=True) supbot --no-server port --port Specify the port to host/connect appium server using, when not specified, use any random unused port, if hosting appium server inside supbot. Supbot(port=12345) supbot --port=12345 check_wait --check-wait Default: 5, specify the seconds to wait for checking UI in critical situations. Use larger value for slow devices, but increasing it might degrade performance of supbot. Supbot(check_wait=10) supbot --check-wait 10 - --no-prompt Don't use interactive console - supbot --no-prompt","title":"Config"},{"location":"how-to-use/config/#configuration","text":"List of configuration accepted by Supbot Supbot2 can be configured using Parameters which is passed into the constructor while creating supbot object.","title":"Configuration"},{"location":"how-to-use/config/#example","text":"with Supbot(device=\"abcd\") as supbot: over here device parameter is set to \"abcd\". Configuration can also be used when running supbot though CLI using arguments. Table given below represents the list of paramters and what it does. Parameter CLI Argument Description Parameter Example CLI Example device, device_name --device, --device-name Specify the android device to use instead of searching automatically using adb Supbot(device=\"emulator1234\") supbot --device emulator1234 no_server --no-server Don't run appium server inside supbot, used when hosting appium server separately Supbot(no_server=True) supbot --no-server port --port Specify the port to host/connect appium server using, when not specified, use any random unused port, if hosting appium server inside supbot. Supbot(port=12345) supbot --port=12345 check_wait --check-wait Default: 5, specify the seconds to wait for checking UI in critical situations. Use larger value for slow devices, but increasing it might degrade performance of supbot. Supbot(check_wait=10) supbot --check-wait 10 - --no-prompt Don't use interactive console - supbot --no-prompt","title":"Example"},{"location":"how-to-use/event/","text":"Event Run callbacks on event in whatsapp message_received When a text message is received Callback Declaration def message_received(contact_name: str, message: str): Description When a text message is received this event is triggered. In the event, contact name of the sender is provided along with the message of sent. If there are multiple messages sent by one user, each of those messages will get their own event trigger, so callback will be executed for each one of those messages. group_message_received When a group message is received Callback Declaration def message_received(group_name: str, contact_name: str, message: str): Description When a group text message is received this event is triggered. In the event, group name, contact name of the sender is provided along with the message of sent. If there are multiple messages sent in the group, each of those messages will get their own event trigger, so callback will be executed for each one of those messages.","title":"Event"},{"location":"how-to-use/event/#event","text":"Run callbacks on event in whatsapp","title":"Event"},{"location":"how-to-use/event/#message_received","text":"When a text message is received","title":"message_received"},{"location":"how-to-use/event/#callback-declaration","text":"def message_received(contact_name: str, message: str):","title":"Callback Declaration"},{"location":"how-to-use/event/#description","text":"When a text message is received this event is triggered. In the event, contact name of the sender is provided along with the message of sent. If there are multiple messages sent by one user, each of those messages will get their own event trigger, so callback will be executed for each one of those messages.","title":"Description"},{"location":"how-to-use/event/#group_message_received","text":"When a group message is received","title":"group_message_received"},{"location":"how-to-use/event/#callback-declaration_1","text":"def message_received(group_name: str, contact_name: str, message: str):","title":"Callback Declaration"},{"location":"how-to-use/event/#description_1","text":"When a group text message is received this event is triggered. In the event, group name, contact name of the sender is provided along with the message of sent. If there are multiple messages sent in the group, each of those messages will get their own event trigger, so callback will be executed for each one of those messages.","title":"Description"},{"location":"how-to-use/helper/","text":"Helper Used to control supbot services quit Flags supbot to turn off Declaration def quit(self): Description Turns status flag false, which allows its internal systems to finish their pending work and finish their work. wait_for_action Blocks the thread until the action is executed. Declaration def wait_for_action(self, action: Action): Description Can be used if result of the action has to be used in the code without using callbacks. wait_for_finish Waits for services to finish. Declaration def wait_for_finish(self): Description Even after quit() is called, it doesn't immediately shut down. So if you want to wait for supbot to turn off completly, this method can be used. You can even use this, if you don't want your main thread to finish while supbot is running on other thread. is_on Checks if quit() is used Declaration def is_on(self) -> bool Description Checks for status flag, returns True if status flag. Used to syncronize other systems of your application to work along with supbot. has_started Returns true if Supbot has started Declaration def has_started(self) -> bool:","title":"Helper"},{"location":"how-to-use/helper/#helper","text":"Used to control supbot services","title":"Helper"},{"location":"how-to-use/helper/#quit","text":"Flags supbot to turn off","title":"quit"},{"location":"how-to-use/helper/#declaration","text":"def quit(self):","title":"Declaration"},{"location":"how-to-use/helper/#description","text":"Turns status flag false, which allows its internal systems to finish their pending work and finish their work.","title":"Description"},{"location":"how-to-use/helper/#wait_for_action","text":"Blocks the thread until the action is executed.","title":"wait_for_action"},{"location":"how-to-use/helper/#declaration_1","text":"def wait_for_action(self, action: Action):","title":"Declaration"},{"location":"how-to-use/helper/#description_1","text":"Can be used if result of the action has to be used in the code without using callbacks.","title":"Description"},{"location":"how-to-use/helper/#wait_for_finish","text":"Waits for services to finish.","title":"wait_for_finish"},{"location":"how-to-use/helper/#declaration_2","text":"def wait_for_finish(self):","title":"Declaration"},{"location":"how-to-use/helper/#description_2","text":"Even after quit() is called, it doesn't immediately shut down. So if you want to wait for supbot to turn off completly, this method can be used. You can even use this, if you don't want your main thread to finish while supbot is running on other thread.","title":"Description"},{"location":"how-to-use/helper/#is_on","text":"Checks if quit() is used","title":"is_on"},{"location":"how-to-use/helper/#declaration_3","text":"def is_on(self) -> bool","title":"Declaration"},{"location":"how-to-use/helper/#description_3","text":"Checks for status flag, returns True if status flag. Used to syncronize other systems of your application to work along with supbot.","title":"Description"},{"location":"how-to-use/helper/#has_started","text":"Returns true if Supbot has started","title":"has_started"},{"location":"how-to-use/helper/#declaration_4","text":"def has_started(self) -> bool:","title":"Declaration"},{"location":"how-to-use/models/","text":"Models Data models for the classes used in Supbot ActionCallback Optional callback parameter for all Action methods Definition ActionCallback = Callable[[Action], None] Example def action_callback(action: Action): print(action) Description When passed as a parameter in Action method, it is called when action is completed. Can be used to handle cases where the Action was not able to complete successfully. Action Represents action to be performed Definition @dataclass class Action: action_id: str action_name: ActionName callback: ActionCallback status: ActionStatus data: Tuple @property def success(self): return self.status == ActionStatus.SUCCESS Description Contains details on the action in supbot, maintains a unique id for each action, status represents the current state of the action. It is returned by every action method.","title":"Models"},{"location":"how-to-use/models/#models","text":"Data models for the classes used in Supbot","title":"Models"},{"location":"how-to-use/models/#actioncallback","text":"Optional callback parameter for all Action methods","title":"ActionCallback"},{"location":"how-to-use/models/#definition","text":"ActionCallback = Callable[[Action], None]","title":"Definition"},{"location":"how-to-use/models/#example","text":"def action_callback(action: Action): print(action)","title":"Example"},{"location":"how-to-use/models/#description","text":"When passed as a parameter in Action method, it is called when action is completed. Can be used to handle cases where the Action was not able to complete successfully.","title":"Description"},{"location":"how-to-use/models/#action","text":"Represents action to be performed","title":"Action"},{"location":"how-to-use/models/#definition_1","text":"@dataclass class Action: action_id: str action_name: ActionName callback: ActionCallback status: ActionStatus data: Tuple @property def success(self): return self.status == ActionStatus.SUCCESS","title":"Definition"},{"location":"how-to-use/models/#description_1","text":"Contains details on the action in supbot, maintains a unique id for each action, status represents the current state of the action. It is returned by every action method.","title":"Description"},{"location":"how-to-use/overview/","text":"How to use Overview of interfacing with Supbot Supbot encapsulates all its functionality into Supbot class. In order to use supbot's services you will have to create its instance. Even after you create the instance it need to start its services so that it becomes useable. It does that using __enter__() method. Also, it need to destroy its internal states before you stop using supbot, which it does using __exit__() method. So instead of using those methods directly, you can use with - as statement to create a scope in which supbot can be used without any worries. with Supbot() as supbot: supbot.send_message(\"Adam\", \"hi!\"); Services There are two main sub-catagories of services that supbot provides which are, Action , Events , and Helper . Action Actions are services which allows the developer to perform operations in whatsapp, like sending a message, anything which is initiated by the developer is an Action. Check out Action to learn more. Event Events are services which allows the developer to run code when an event occours in whatsapp, like reciving a message. Supbot provides event listeners so that you can register your own callback methods to be executed when an event occours. Check out Event to learn more. Helper Services Other than the above to main types of services, supbot also provides some helper methods. Check out Helper to learn more. Example from supbot import Supbot def repeat_message(contact_name, message): supbot.send_message(contact_name, message) with Supbot(message_received=repeat_message) as supbot: supbot.wait_for_finish() Lets look at the getting started example, to understand each type of service much better. The code written below re-sends the message sent to the bot back. We will break down each part of the code, in order to understand how supbot API is used from supbot import Supbot imports Supbot class which will be used to create its instance later on. def repeat_message(contact_name, message): This is a function which is going to be used as an event callback. supbot.send_message(contact_name, message) Over here we are using an Action service. send_message service just sends the message to the target contact. Over here we are getting the contact name from the event and we are directly passing it to the Action . with ... as supbot: In order to use supbot we need to create an instance for it, and for it to make its services usable, it need to initialize itself, which is done using with - as statement. Supbot(message_received=repeat_message) Constructor of supbot takes in the callback methods for events you want to use. Over here we are assigning the repeat_message method to message_received Event, so that when message_received Event occours, repeat_message method is called. supbot.wait_for_finish() This is a Helper service which allows the main thread to sleep till supbot is turned off. This is used so that the program doesn't quit.","title":"Overview"},{"location":"how-to-use/overview/#how-to-use","text":"Overview of interfacing with Supbot Supbot encapsulates all its functionality into Supbot class. In order to use supbot's services you will have to create its instance. Even after you create the instance it need to start its services so that it becomes useable. It does that using __enter__() method. Also, it need to destroy its internal states before you stop using supbot, which it does using __exit__() method. So instead of using those methods directly, you can use with - as statement to create a scope in which supbot can be used without any worries. with Supbot() as supbot: supbot.send_message(\"Adam\", \"hi!\");","title":"How to use"},{"location":"how-to-use/overview/#services","text":"There are two main sub-catagories of services that supbot provides which are, Action , Events , and Helper .","title":"Services"},{"location":"how-to-use/overview/#action","text":"Actions are services which allows the developer to perform operations in whatsapp, like sending a message, anything which is initiated by the developer is an Action. Check out Action to learn more.","title":"Action"},{"location":"how-to-use/overview/#event","text":"Events are services which allows the developer to run code when an event occours in whatsapp, like reciving a message. Supbot provides event listeners so that you can register your own callback methods to be executed when an event occours. Check out Event to learn more.","title":"Event"},{"location":"how-to-use/overview/#helper-services","text":"Other than the above to main types of services, supbot also provides some helper methods. Check out Helper to learn more.","title":"Helper Services"},{"location":"how-to-use/overview/#example","text":"from supbot import Supbot def repeat_message(contact_name, message): supbot.send_message(contact_name, message) with Supbot(message_received=repeat_message) as supbot: supbot.wait_for_finish() Lets look at the getting started example, to understand each type of service much better. The code written below re-sends the message sent to the bot back. We will break down each part of the code, in order to understand how supbot API is used from supbot import Supbot imports Supbot class which will be used to create its instance later on. def repeat_message(contact_name, message): This is a function which is going to be used as an event callback. supbot.send_message(contact_name, message) Over here we are using an Action service. send_message service just sends the message to the target contact. Over here we are getting the contact name from the event and we are directly passing it to the Action . with ... as supbot: In order to use supbot we need to create an instance for it, and for it to make its services usable, it need to initialize itself, which is done using with - as statement. Supbot(message_received=repeat_message) Constructor of supbot takes in the callback methods for events you want to use. Over here we are assigning the repeat_message method to message_received Event, so that when message_received Event occours, repeat_message method is called. supbot.wait_for_finish() This is a Helper service which allows the main thread to sleep till supbot is turned off. This is used so that the program doesn't quit.","title":"Example"}]}